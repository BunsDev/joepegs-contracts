{
  "address": "0xDc6cC7a4413367Dd28f1DbC77E4F531a593844A9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INTERFACE_ID_ERC1155",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTERFACE_ID_ERC2981",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTERFACE_ID_ERC721",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "checkForCollectionSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyFeeRegistry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyFeeRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "updateOwnerOfRoyaltyFeeRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_royaltyFeeLimit",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyFeeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyInfoForCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyInfoForCollectionIfAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyInfoForCollectionIfOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyInfoForCollectionIfSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xabef555bcd6cb02c32a33691326eca9dd41c6512f6baad1743da4286ec1b9652",
  "receipt": {
    "to": null,
    "from": "0x336c61f5eE471c645d24133ACcc88aD7b63E3a42",
    "contractAddress": "0xDc6cC7a4413367Dd28f1DbC77E4F531a593844A9",
    "transactionIndex": 0,
    "gasUsed": "998425",
    "logsBloom": "0x
    "blockHash": "0x9eca6d4956780feb9c2b9cd075d4fca102dcf4df5e1e0ddfa7db786e6cc5fabb",
    "transactionHash": "0xabef555bcd6cb02c32a33691326eca9dd41c6512f6baad1743da4286ec1b9652",
    "logs": [],
    "blockNumber": 8946611,
    "cumulativeGasUsed": "998425",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "74ac0471e0eeac02914c4a972d6a0330",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC1155\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC2981\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC721\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"checkForCollectionSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyFeeRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"updateOwnerOfRoyaltyFeeRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royaltyFeeLimit\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyFeeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForCollectionIfAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForCollectionIfOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForCollectionIfSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkForCollectionSetter(address)\":{\"params\":{\"collection\":\"collection address\"},\"returns\":{\"_0\":\"(whether there is a setter (address(0 if not)), Position 0: Royalty setter is set in the registry 1: ERC2981 and no setter 2: setter can be set using owner() 3: setter can be set using admin() 4: setter cannot be set, nor support for ERC2981\"}},\"initialize(address)\":{\"params\":{\"_royaltyFeeRegistry\":\"address of the royalty fee registry\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateOwnerOfRoyaltyFeeRegistry(address)\":{\"details\":\"Can be used for migration of this royalty fee setter contract\",\"params\":{\"_owner\":\"new owner address\"}},\"updateRoyaltyFeeLimit(uint256)\":{\"params\":{\"_royaltyFeeLimit\":\"new royalty fee limit (500 = 5%, 1,000 = 10%)\"}},\"updateRoyaltyInfoForCollection(address,address,address,uint256)\":{\"details\":\"Can only be called by contract owner (of this)\",\"params\":{\"collection\":\"address of the NFT contract\",\"fee\":\"fee (500 = 5%, 1,000 = 10%)\",\"receiver\":\"receiver for the royalty fee\",\"setter\":\"address that sets the receiver\"}},\"updateRoyaltyInfoForCollectionIfAdmin(address,address,address,uint256)\":{\"details\":\"Only to be called if there is no setter address\",\"params\":{\"collection\":\"address of the NFT contract\",\"fee\":\"fee (500 = 5%, 1,000 = 10%)\",\"receiver\":\"receiver for the royalty fee\",\"setter\":\"address that sets the receiver\"}},\"updateRoyaltyInfoForCollectionIfOwner(address,address,address,uint256)\":{\"details\":\"Only to be called if there is no setter address\",\"params\":{\"collection\":\"address of the NFT contract\",\"fee\":\"fee (500 = 5%, 1,000 = 10%)\",\"receiver\":\"receiver for the royalty fee\",\"setter\":\"address that sets the receiver\"}},\"updateRoyaltyInfoForCollectionIfSetter(address,address,address,uint256)\":{\"details\":\"Only to be called if there msg.sender is the setter\",\"params\":{\"collection\":\"address of the NFT contract\",\"fee\":\"fee (500 = 5%, 1,000 = 10%)\",\"receiver\":\"receiver for the royalty fee\",\"setter\":\"address that sets the receiver\"}}},\"title\":\"RoyaltyFeeSetter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkForCollectionSetter(address)\":{\"notice\":\"Check royalty info for collection\"},\"initialize(address)\":{\"notice\":\"Initializer\"},\"updateOwnerOfRoyaltyFeeRegistry(address)\":{\"notice\":\"Update owner of royalty fee registry\"},\"updateRoyaltyFeeLimit(uint256)\":{\"notice\":\"Update royalty info for collection\"},\"updateRoyaltyInfoForCollection(address,address,address,uint256)\":{\"notice\":\"Update royalty info for collection\"},\"updateRoyaltyInfoForCollectionIfAdmin(address,address,address,uint256)\":{\"notice\":\"Update royalty info for collection if admin\"},\"updateRoyaltyInfoForCollectionIfOwner(address,address,address,uint256)\":{\"notice\":\"Update royalty info for collection if owner\"},\"updateRoyaltyInfoForCollectionIfSetter(address,address,address,uint256)\":{\"notice\":\"Update royalty info for collection\"}},\"notice\":\"Used to allow creators to set royalty parameters in the RoyaltyFeeRegistry.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RoyaltyFeeSetter.sol\":\"RoyaltyFeeSetter\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/RoyaltyFeeSetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport {IRoyaltyFeeRegistry} from \\\"./interfaces/IRoyaltyFeeRegistry.sol\\\";\\nimport {IOwnable} from \\\"./interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title RoyaltyFeeSetter\\n * @notice Used to allow creators to set royalty parameters in the RoyaltyFeeRegistry.\\n */\\ncontract RoyaltyFeeSetter is Initializable, OwnableUpgradeable {\\n    // ERC721 interfaceID\\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    // ERC1155 interfaceID\\n    bytes4 public constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    // ERC2981 interfaceID\\n    bytes4 public constant INTERFACE_ID_ERC2981 = 0x2a55205a;\\n\\n    address public royaltyFeeRegistry;\\n\\n    /**\\n     * @notice Initializer\\n     * @param _royaltyFeeRegistry address of the royalty fee registry\\n     */\\n    function initialize(address _royaltyFeeRegistry) public initializer {\\n        __Ownable_init();\\n\\n        royaltyFeeRegistry = _royaltyFeeRegistry;\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection if admin\\n     * @dev Only to be called if there is no setter address\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForCollectionIfAdmin(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external {\\n        require(\\n            !IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981),\\n            \\\"Admin: Must not be ERC2981\\\"\\n        );\\n        require(\\n            msg.sender == IOwnable(collection).admin(),\\n            \\\"Admin: Not the admin\\\"\\n        );\\n\\n        _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(\\n            collection,\\n            setter,\\n            receiver,\\n            fee\\n        );\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection if owner\\n     * @dev Only to be called if there is no setter address\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForCollectionIfOwner(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external {\\n        require(\\n            !IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981),\\n            \\\"Owner: Must not be ERC2981\\\"\\n        );\\n        require(\\n            msg.sender == IOwnable(collection).owner(),\\n            \\\"Owner: Not the owner\\\"\\n        );\\n\\n        _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(\\n            collection,\\n            setter,\\n            receiver,\\n            fee\\n        );\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @dev Only to be called if there msg.sender is the setter\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForCollectionIfSetter(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external {\\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry)\\n            .royaltyFeeInfoCollection(collection);\\n        require(msg.sender == currentSetter, \\\"Setter: Not the setter\\\");\\n\\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(\\n            collection,\\n            setter,\\n            receiver,\\n            fee\\n        );\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @dev Can only be called by contract owner (of this)\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForCollection(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external onlyOwner {\\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(\\n            collection,\\n            setter,\\n            receiver,\\n            fee\\n        );\\n    }\\n\\n    /**\\n     * @notice Update owner of royalty fee registry\\n     * @dev Can be used for migration of this royalty fee setter contract\\n     * @param _owner new owner address\\n     */\\n    function updateOwnerOfRoyaltyFeeRegistry(address _owner)\\n        external\\n        onlyOwner\\n    {\\n        IOwnable(royaltyFeeRegistry).transferOwnership(_owner);\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit)\\n        external\\n        onlyOwner\\n    {\\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyFeeLimit(\\n            _royaltyFeeLimit\\n        );\\n    }\\n\\n    /**\\n     * @notice Check royalty info for collection\\n     * @param collection collection address\\n     * @return (whether there is a setter (address(0 if not)),\\n     * Position\\n     * 0: Royalty setter is set in the registry\\n     * 1: ERC2981 and no setter\\n     * 2: setter can be set using owner()\\n     * 3: setter can be set using admin()\\n     * 4: setter cannot be set, nor support for ERC2981\\n     */\\n    function checkForCollectionSetter(address collection)\\n        external\\n        view\\n        returns (address, uint8)\\n    {\\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry)\\n            .royaltyFeeInfoCollection(collection);\\n\\n        if (currentSetter != address(0)) {\\n            return (currentSetter, 0);\\n        }\\n\\n        try\\n            IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981)\\n        returns (bool interfaceSupport) {\\n            if (interfaceSupport) {\\n                return (address(0), 1);\\n            }\\n        } catch {}\\n\\n        try IOwnable(collection).owner() returns (address setter) {\\n            return (setter, 2);\\n        } catch {\\n            try IOwnable(collection).admin() returns (address setter) {\\n                return (setter, 3);\\n            } catch {\\n                return (address(0), 4);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Update information and perform checks before updating royalty fee registry\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) internal {\\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry)\\n            .royaltyFeeInfoCollection(collection);\\n        require(currentSetter == address(0), \\\"Setter: Already set\\\");\\n\\n        require(\\n            (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721) ||\\n                IERC165(collection).supportsInterface(INTERFACE_ID_ERC1155)),\\n            \\\"Setter: Not ERC721/ERC1155\\\"\\n        );\\n\\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(\\n            collection,\\n            setter,\\n            receiver,\\n            fee\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf0e89d6fd1dfdc50b0e6bfd62749211fda0d3d91e020ee60a97b234d9312e312\",\"license\":\"MIT\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address);\\n\\n    function admin() external view returns (address);\\n}\\n\",\"keccak256\":\"0x18db62f701321954e63206b2ed92cf07a762720b7563514fdb68cc4f5af2f52c\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyFeeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRoyaltyFeeRegistry {\\n    function updateRoyaltyInfoForCollection(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external;\\n\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external;\\n\\n    function royaltyInfo(address collection, uint256 amount)\\n        external\\n        view\\n        returns (address, uint256);\\n\\n    function royaltyFeeInfoCollection(address collection)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0x26ee0d6a50c317b22494ad09ff62d8469b24a51252be563dfb63512ff377c41d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkForCollectionSetter(address)": {
        "params": {
          "collection": "collection address"
        },
        "returns": {
          "_0": "(whether there is a setter (address(0 if not)), Position 0: Royalty setter is set in the registry 1: ERC2981 and no setter 2: setter can be set using owner() 3: setter can be set using admin() 4: setter cannot be set, nor support for ERC2981"
        }
      },
      "initialize(address)": {
        "params": {
          "_royaltyFeeRegistry": "address of the royalty fee registry"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateOwnerOfRoyaltyFeeRegistry(address)": {
        "details": "Can be used for migration of this royalty fee setter contract",
        "params": {
          "_owner": "new owner address"
        }
      },
      "updateRoyaltyFeeLimit(uint256)": {
        "params": {
          "_royaltyFeeLimit": "new royalty fee limit (500 = 5%, 1,000 = 10%)"
        }
      },
      "updateRoyaltyInfoForCollection(address,address,address,uint256)": {
        "details": "Can only be called by contract owner (of this)",
        "params": {
          "collection": "address of the NFT contract",
          "fee": "fee (500 = 5%, 1,000 = 10%)",
          "receiver": "receiver for the royalty fee",
          "setter": "address that sets the receiver"
        }
      },
      "updateRoyaltyInfoForCollectionIfAdmin(address,address,address,uint256)": {
        "details": "Only to be called if there is no setter address",
        "params": {
          "collection": "address of the NFT contract",
          "fee": "fee (500 = 5%, 1,000 = 10%)",
          "receiver": "receiver for the royalty fee",
          "setter": "address that sets the receiver"
        }
      },
      "updateRoyaltyInfoForCollectionIfOwner(address,address,address,uint256)": {
        "details": "Only to be called if there is no setter address",
        "params": {
          "collection": "address of the NFT contract",
          "fee": "fee (500 = 5%, 1,000 = 10%)",
          "receiver": "receiver for the royalty fee",
          "setter": "address that sets the receiver"
        }
      },
      "updateRoyaltyInfoForCollectionIfSetter(address,address,address,uint256)": {
        "details": "Only to be called if there msg.sender is the setter",
        "params": {
          "collection": "address of the NFT contract",
          "fee": "fee (500 = 5%, 1,000 = 10%)",
          "receiver": "receiver for the royalty fee",
          "setter": "address that sets the receiver"
        }
      }
    },
    "title": "RoyaltyFeeSetter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkForCollectionSetter(address)": {
        "notice": "Check royalty info for collection"
      },
      "initialize(address)": {
        "notice": "Initializer"
      },
      "updateOwnerOfRoyaltyFeeRegistry(address)": {
        "notice": "Update owner of royalty fee registry"
      },
      "updateRoyaltyFeeLimit(uint256)": {
        "notice": "Update royalty info for collection"
      },
      "updateRoyaltyInfoForCollection(address,address,address,uint256)": {
        "notice": "Update royalty info for collection"
      },
      "updateRoyaltyInfoForCollectionIfAdmin(address,address,address,uint256)": {
        "notice": "Update royalty info for collection if admin"
      },
      "updateRoyaltyInfoForCollectionIfOwner(address,address,address,uint256)": {
        "notice": "Update royalty info for collection if owner"
      },
      "updateRoyaltyInfoForCollectionIfSetter(address,address,address,uint256)": {
        "notice": "Update royalty info for collection"
      }
    },
    "notice": "Used to allow creators to set royalty parameters in the RoyaltyFeeRegistry.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/RoyaltyFeeSetter.sol:RoyaltyFeeSetter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/RoyaltyFeeSetter.sol:RoyaltyFeeSetter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 540,
        "contract": "contracts/RoyaltyFeeSetter.sol:RoyaltyFeeSetter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/RoyaltyFeeSetter.sol:RoyaltyFeeSetter",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/RoyaltyFeeSetter.sol:RoyaltyFeeSetter",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5651,
        "contract": "contracts/RoyaltyFeeSetter.sol:RoyaltyFeeSetter",
        "label": "royaltyFeeRegistry",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}