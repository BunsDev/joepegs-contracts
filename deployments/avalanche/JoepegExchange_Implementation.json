{
  "address": "0x7495256a934FF45EFB54ebBcc75CA4b2f7eF4A55",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinNonce",
          "type": "uint256"
        }
      ],
      "name": "CancelAllOrders",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "orderNonces",
          "type": "uint256[]"
        }
      ],
      "name": "CancelMultipleOrders",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "currencyManager",
          "type": "address"
        }
      ],
      "name": "NewCurrencyManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "executionManager",
          "type": "address"
        }
      ],
      "name": "NewExecutionManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "protocolFeeManager",
          "type": "address"
        }
      ],
      "name": "NewProtocolFeeManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "protocolFeeRecipient",
          "type": "address"
        }
      ],
      "name": "NewProtocolFeeRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyFeeManager",
          "type": "address"
        }
      ],
      "name": "NewRoyaltyFeeManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "transferSelectorNFT",
          "type": "address"
        }
      ],
      "name": "NewTransferSelectorNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyPayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderNonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "TakerAsk",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderNonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "TakerBid",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAVAX",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minNonce",
          "type": "uint256"
        }
      ],
      "name": "cancelAllOrdersForSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "orderNonces",
          "type": "uint256[]"
        }
      ],
      "name": "cancelMultipleMakerOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currencyManager",
      "outputs": [
        {
          "internalType": "contract ICurrencyManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executionManager",
      "outputs": [
        {
          "internalType": "contract IExecutionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currencyManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_executionManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolFeeManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyFeeManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WAVAX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolFeeRecipient",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "orderNonce",
          "type": "uint256"
        }
      ],
      "name": "isUserOrderNonceExecutedOrCancelled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderTypes.TakerOrder",
          "name": "takerBid",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OrderTypes.MakerOrder",
          "name": "makerAsk",
          "type": "tuple"
        }
      ],
      "name": "matchAskWithTakerBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderTypes.TakerOrder",
          "name": "takerBid",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OrderTypes.MakerOrder",
          "name": "makerAsk",
          "type": "tuple"
        }
      ],
      "name": "matchAskWithTakerBidUsingAVAXAndWAVAX",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderTypes.TakerOrder",
          "name": "takerAsk",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OrderTypes.MakerOrder",
          "name": "makerBid",
          "type": "tuple"
        }
      ],
      "name": "matchBidWithTakerAsk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeManager",
      "outputs": [
        {
          "internalType": "contract IProtocolFeeManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyFeeManager",
      "outputs": [
        {
          "internalType": "contract IRoyaltyFeeManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferSelectorNFT",
      "outputs": [
        {
          "internalType": "contract ITransferSelectorNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currencyManager",
          "type": "address"
        }
      ],
      "name": "updateCurrencyManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executionManager",
          "type": "address"
        }
      ],
      "name": "updateExecutionManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolFeeManager",
          "type": "address"
        }
      ],
      "name": "updateProtocolFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolFeeRecipient",
          "type": "address"
        }
      ],
      "name": "updateProtocolFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyFeeManager",
          "type": "address"
        }
      ],
      "name": "updateRoyaltyFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_transferSelectorNFT",
          "type": "address"
        }
      ],
      "name": "updateTransferSelectorNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userMinOrderNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x24c579350ef9f593eecdc1ebb57a264ac472432f91353c7121a8534bde92ee3e",
  "receipt": {
    "to": null,
    "from": "0x336c61f5eE471c645d24133ACcc88aD7b63E3a42",
    "contractAddress": "0x7495256a934FF45EFB54ebBcc75CA4b2f7eF4A55",
    "transactionIndex": 1,
    "gasUsed": "2899498",
    "logsBloom": "0x
    "blockHash": "0xe020d0aaa38df6a6e475fcb3a42f1a831694bcdd0fc2949df2bab63637b614ea",
    "transactionHash": "0x24c579350ef9f593eecdc1ebb57a264ac472432f91353c7121a8534bde92ee3e",
    "logs": [],
    "blockNumber": 14032738,
    "cumulativeGasUsed": "2920498",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7c2e4bade457d7736b90e02c2377cd79",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinNonce\",\"type\":\"uint256\"}],\"name\":\"CancelAllOrders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"orderNonces\",\"type\":\"uint256[]\"}],\"name\":\"CancelMultipleOrders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currencyManager\",\"type\":\"address\"}],\"name\":\"NewCurrencyManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executionManager\",\"type\":\"address\"}],\"name\":\"NewExecutionManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocolFeeManager\",\"type\":\"address\"}],\"name\":\"NewProtocolFeeManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"NewProtocolFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyFeeManager\",\"type\":\"address\"}],\"name\":\"NewRoyaltyFeeManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transferSelectorNFT\",\"type\":\"address\"}],\"name\":\"NewTransferSelectorNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RoyaltyPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TakerAsk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TakerBid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENTAGE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAVAX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minNonce\",\"type\":\"uint256\"}],\"name\":\"cancelAllOrdersForSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderNonces\",\"type\":\"uint256[]\"}],\"name\":\"cancelMultipleMakerOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyManager\",\"outputs\":[{\"internalType\":\"contract ICurrencyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executionManager\",\"outputs\":[{\"internalType\":\"contract IExecutionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currencyManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WAVAX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"}],\"name\":\"isUserOrderNonceExecutedOrCancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.TakerOrder\",\"name\":\"takerBid\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerAsk\",\"type\":\"tuple\"}],\"name\":\"matchAskWithTakerBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.TakerOrder\",\"name\":\"takerBid\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerAsk\",\"type\":\"tuple\"}],\"name\":\"matchAskWithTakerBidUsingAVAXAndWAVAX\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.TakerOrder\",\"name\":\"takerAsk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerBid\",\"type\":\"tuple\"}],\"name\":\"matchBidWithTakerAsk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeManager\",\"outputs\":[{\"internalType\":\"contract IProtocolFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeManager\",\"outputs\":[{\"internalType\":\"contract IRoyaltyFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferSelectorNFT\",\"outputs\":[{\"internalType\":\"contract ITransferSelectorNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currencyManager\",\"type\":\"address\"}],\"name\":\"updateCurrencyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executionManager\",\"type\":\"address\"}],\"name\":\"updateExecutionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeManager\",\"type\":\"address\"}],\"name\":\"updateProtocolFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"updateProtocolFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyFeeManager\",\"type\":\"address\"}],\"name\":\"updateRoyaltyFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transferSelectorNFT\",\"type\":\"address\"}],\"name\":\"updateTransferSelectorNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMinOrderNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancelAllOrdersForSender(uint256)\":{\"params\":{\"minNonce\":\"minimum user nonce\"}},\"cancelMultipleMakerOrders(uint256[])\":{\"params\":{\"orderNonces\":\"array of order nonces\"}},\"initialize(address,address,address,address,address,address)\":{\"params\":{\"_WAVAX\":\"wrapped ether address (for other chains, use wrapped native asset)\",\"_currencyManager\":\"currency manager address\",\"_executionManager\":\"execution manager address\",\"_protocolFeeManager\":\"protocol fee manager address\",\"_protocolFeeRecipient\":\"protocol fee recipient\",\"_royaltyFeeManager\":\"royalty fee manager address\"}},\"isUserOrderNonceExecutedOrCancelled(address,uint256)\":{\"params\":{\"orderNonce\":\"nonce of the order\",\"user\":\"address of user\"}},\"matchAskWithTakerBid((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"params\":{\"makerAsk\":\"maker ask order\",\"takerBid\":\"taker bid order\"}},\"matchAskWithTakerBidUsingAVAXAndWAVAX((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"params\":{\"makerAsk\":\"maker ask order\",\"takerBid\":\"taker bid order\"}},\"matchBidWithTakerAsk((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"params\":{\"makerBid\":\"maker bid order\",\"takerAsk\":\"taker ask order\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCurrencyManager(address)\":{\"params\":{\"_currencyManager\":\"new currency manager address\"}},\"updateExecutionManager(address)\":{\"params\":{\"_executionManager\":\"new execution manager address\"}},\"updateProtocolFeeManager(address)\":{\"params\":{\"_protocolFeeManager\":\"new protocol fee manager address\"}},\"updateProtocolFeeRecipient(address)\":{\"params\":{\"_protocolFeeRecipient\":\"new recipient for protocol fees\"}},\"updateRoyaltyFeeManager(address)\":{\"params\":{\"_royaltyFeeManager\":\"new fee manager address\"}},\"updateTransferSelectorNFT(address)\":{\"params\":{\"_transferSelectorNFT\":\"new transfer selector address\"}}},\"title\":\"JoepegExchange\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelAllOrdersForSender(uint256)\":{\"notice\":\"Cancel all pending orders for a sender\"},\"cancelMultipleMakerOrders(uint256[])\":{\"notice\":\"Cancel maker orders\"},\"initialize(address,address,address,address,address,address)\":{\"notice\":\"Constructor\"},\"isUserOrderNonceExecutedOrCancelled(address,uint256)\":{\"notice\":\"Check whether user order nonce is executed or cancelled\"},\"matchAskWithTakerBid((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"notice\":\"Match a takerBid with a matchAsk\"},\"matchAskWithTakerBidUsingAVAXAndWAVAX((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"notice\":\"Match ask with a taker bid order using AVAX\"},\"matchBidWithTakerAsk((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"notice\":\"Match a takerAsk with a makerBid\"},\"updateCurrencyManager(address)\":{\"notice\":\"Update currency manager\"},\"updateExecutionManager(address)\":{\"notice\":\"Update execution manager\"},\"updateProtocolFeeManager(address)\":{\"notice\":\"Update protocol fee manager\"},\"updateProtocolFeeRecipient(address)\":{\"notice\":\"Update protocol fee recipient\"},\"updateRoyaltyFeeManager(address)\":{\"notice\":\"Update royalty fee manager\"},\"updateTransferSelectorNFT(address)\":{\"notice\":\"Update transfer selector NFT\"}},\"notice\":\"Fork of the LooksRareExchange contract with some minor additions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JoepegExchange.sol\":\"JoepegExchange\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/JoepegExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// OpenZeppelin contracts\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// Joepeg interfaces\\nimport {ICurrencyManager} from \\\"./interfaces/ICurrencyManager.sol\\\";\\nimport {IExecutionManager} from \\\"./interfaces/IExecutionManager.sol\\\";\\nimport {IExecutionStrategy} from \\\"./interfaces/IExecutionStrategy.sol\\\";\\nimport {IProtocolFeeManager} from \\\"./interfaces/IProtocolFeeManager.sol\\\";\\nimport {IRoyaltyFeeManager} from \\\"./interfaces/IRoyaltyFeeManager.sol\\\";\\nimport {IJoepegExchange} from \\\"./interfaces/IJoepegExchange.sol\\\";\\nimport {ITransferManagerNFT} from \\\"./interfaces/ITransferManagerNFT.sol\\\";\\nimport {ITransferSelectorNFT} from \\\"./interfaces/ITransferSelectorNFT.sol\\\";\\nimport {IWAVAX} from \\\"./interfaces/IWAVAX.sol\\\";\\n\\n// Joepeg libraries\\nimport {OrderTypes} from \\\"./libraries/OrderTypes.sol\\\";\\nimport {SignatureChecker} from \\\"./libraries/SignatureChecker.sol\\\";\\n\\n/**\\n * @title JoepegExchange\\n * @notice Fork of the LooksRareExchange contract with some minor additions.\\n */\\ncontract JoepegExchange is\\n    IJoepegExchange,\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    using OrderTypes for OrderTypes.MakerOrder;\\n    using OrderTypes for OrderTypes.TakerOrder;\\n\\n    uint256 public immutable PERCENTAGE_PRECISION = 10000;\\n\\n    address public WAVAX;\\n    bytes32 public domainSeparator;\\n\\n    address public protocolFeeRecipient;\\n\\n    ICurrencyManager public currencyManager;\\n    IExecutionManager public executionManager;\\n    IProtocolFeeManager public protocolFeeManager;\\n    IRoyaltyFeeManager public royaltyFeeManager;\\n    ITransferSelectorNFT public transferSelectorNFT;\\n\\n    mapping(address => uint256) public userMinOrderNonce;\\n    mapping(address => mapping(uint256 => bool))\\n        private _isUserOrderNonceExecutedOrCancelled;\\n\\n    event CancelAllOrders(address indexed user, uint256 newMinNonce);\\n    event CancelMultipleOrders(address indexed user, uint256[] orderNonces);\\n    event NewCurrencyManager(address indexed currencyManager);\\n    event NewExecutionManager(address indexed executionManager);\\n    event NewProtocolFeeManager(address indexed protocolFeeManager);\\n    event NewProtocolFeeRecipient(address indexed protocolFeeRecipient);\\n    event NewRoyaltyFeeManager(address indexed royaltyFeeManager);\\n    event NewTransferSelectorNFT(address indexed transferSelectorNFT);\\n\\n    event RoyaltyPayment(\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        address indexed royaltyRecipient,\\n        address currency,\\n        uint256 amount\\n    );\\n\\n    event TakerAsk(\\n        bytes32 orderHash, // bid hash of the maker order\\n        uint256 orderNonce, // user order nonce\\n        address indexed taker, // sender address for the taker ask order\\n        address indexed maker, // maker address of the initial bid order\\n        address indexed strategy, // strategy that defines the execution\\n        address currency, // currency address\\n        address collection, // collection address\\n        uint256 tokenId, // tokenId transferred\\n        uint256 amount, // amount of tokens transferred\\n        uint256 price // final transacted price\\n    );\\n\\n    event TakerBid(\\n        bytes32 orderHash, // ask hash of the maker order\\n        uint256 orderNonce, // user order nonce\\n        address indexed taker, // sender address for the taker bid order\\n        address indexed maker, // maker address of the initial ask order\\n        address indexed strategy, // strategy that defines the execution\\n        address currency, // currency address\\n        address collection, // collection address\\n        uint256 tokenId, // tokenId transferred\\n        uint256 amount, // amount of tokens transferred\\n        uint256 price // final transacted price\\n    );\\n\\n    /**\\n     * @notice Constructor\\n     * @param _currencyManager currency manager address\\n     * @param _executionManager execution manager address\\n     * @param _protocolFeeManager protocol fee manager address\\n     * @param _royaltyFeeManager royalty fee manager address\\n     * @param _WAVAX wrapped ether address (for other chains, use wrapped native asset)\\n     * @param _protocolFeeRecipient protocol fee recipient\\n     */\\n    function initialize(\\n        address _currencyManager,\\n        address _executionManager,\\n        address _protocolFeeManager,\\n        address _royaltyFeeManager,\\n        address _WAVAX,\\n        address _protocolFeeRecipient\\n    ) public initializer {\\n        __ReentrancyGuard_init();\\n        __Ownable_init();\\n\\n        // Calculate the domain separator\\n        domainSeparator = keccak256(\\n            abi.encode(\\n                0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f, // keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n                0x09c73de1316dde4c80e91bee77727ccdf2cbf7435c9e4c7db6c37af85fa4afcb, // keccak256(\\\"JoepegExchange\\\")\\n                0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6, // keccak256(bytes(\\\"1\\\")) for versionId = 1\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n\\n        currencyManager = ICurrencyManager(_currencyManager);\\n        executionManager = IExecutionManager(_executionManager);\\n        protocolFeeManager = IProtocolFeeManager(_protocolFeeManager);\\n        royaltyFeeManager = IRoyaltyFeeManager(_royaltyFeeManager);\\n        WAVAX = _WAVAX;\\n        protocolFeeRecipient = _protocolFeeRecipient;\\n    }\\n\\n    /**\\n     * @notice Cancel all pending orders for a sender\\n     * @param minNonce minimum user nonce\\n     */\\n    function cancelAllOrdersForSender(uint256 minNonce) external {\\n        require(\\n            minNonce > userMinOrderNonce[msg.sender],\\n            \\\"Cancel: Order nonce lower than current\\\"\\n        );\\n        require(\\n            minNonce < userMinOrderNonce[msg.sender] + 500000,\\n            \\\"Cancel: Cannot cancel more orders\\\"\\n        );\\n        userMinOrderNonce[msg.sender] = minNonce;\\n\\n        emit CancelAllOrders(msg.sender, minNonce);\\n    }\\n\\n    /**\\n     * @notice Cancel maker orders\\n     * @param orderNonces array of order nonces\\n     */\\n    function cancelMultipleMakerOrders(uint256[] calldata orderNonces)\\n        external\\n    {\\n        require(orderNonces.length > 0, \\\"Cancel: Cannot be empty\\\");\\n\\n        for (uint256 i = 0; i < orderNonces.length; i++) {\\n            require(\\n                orderNonces[i] >= userMinOrderNonce[msg.sender],\\n                \\\"Cancel: Order nonce lower than current\\\"\\n            );\\n            _isUserOrderNonceExecutedOrCancelled[msg.sender][\\n                orderNonces[i]\\n            ] = true;\\n        }\\n\\n        emit CancelMultipleOrders(msg.sender, orderNonces);\\n    }\\n\\n    /**\\n     * @notice Match ask with a taker bid order using AVAX\\n     * @param takerBid taker bid order\\n     * @param makerAsk maker ask order\\n     */\\n    function matchAskWithTakerBidUsingAVAXAndWAVAX(\\n        OrderTypes.TakerOrder calldata takerBid,\\n        OrderTypes.MakerOrder calldata makerAsk\\n    ) external payable override nonReentrant {\\n        require(\\n            (makerAsk.isOrderAsk) && (!takerBid.isOrderAsk),\\n            \\\"Order: Wrong sides\\\"\\n        );\\n        require(makerAsk.currency == WAVAX, \\\"Order: Currency must be WAVAX\\\");\\n        require(\\n            msg.sender == takerBid.taker,\\n            \\\"Order: Taker must be the sender\\\"\\n        );\\n\\n        // Check the maker ask order\\n        bytes32 askHash = makerAsk.hash();\\n        _validateOrder(makerAsk, askHash);\\n\\n        // If not enough AVAX to cover the price, use WAVAX\\n        if (takerBid.price > msg.value) {\\n            IERC20(WAVAX).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                (takerBid.price - msg.value)\\n            );\\n        } else {\\n            require(takerBid.price == msg.value, \\\"Order: Msg.value too high\\\");\\n        }\\n\\n        // Wrap AVAX sent to this contract\\n        IWAVAX(WAVAX).deposit{value: msg.value}();\\n\\n        // Retrieve execution parameters\\n        (\\n            bool isExecutionValid,\\n            uint256 tokenId,\\n            uint256 amount\\n        ) = IExecutionStrategy(makerAsk.strategy).canExecuteTakerBid(\\n                takerBid,\\n                makerAsk\\n            );\\n\\n        require(isExecutionValid, \\\"Strategy: Execution invalid\\\");\\n\\n        // Update maker ask order status to true (prevents replay)\\n        _isUserOrderNonceExecutedOrCancelled[makerAsk.signer][\\n            makerAsk.nonce\\n        ] = true;\\n\\n        // Execution part 1/2\\n        _transferFeesAndFundsWithWAVAX(\\n            makerAsk.collection,\\n            tokenId,\\n            makerAsk.signer,\\n            takerBid.price,\\n            makerAsk.minPercentageToAsk\\n        );\\n\\n        // Execution part 2/2\\n        _transferNonFungibleToken(\\n            makerAsk.collection,\\n            makerAsk.signer,\\n            takerBid.taker,\\n            tokenId,\\n            amount\\n        );\\n\\n        emit TakerBid(\\n            askHash,\\n            makerAsk.nonce,\\n            takerBid.taker,\\n            makerAsk.signer,\\n            makerAsk.strategy,\\n            makerAsk.currency,\\n            makerAsk.collection,\\n            tokenId,\\n            amount,\\n            takerBid.price\\n        );\\n    }\\n\\n    /**\\n     * @notice Match a takerBid with a matchAsk\\n     * @param takerBid taker bid order\\n     * @param makerAsk maker ask order\\n     */\\n    function matchAskWithTakerBid(\\n        OrderTypes.TakerOrder calldata takerBid,\\n        OrderTypes.MakerOrder calldata makerAsk\\n    ) external override nonReentrant {\\n        require(\\n            (makerAsk.isOrderAsk) && (!takerBid.isOrderAsk),\\n            \\\"Order: Wrong sides\\\"\\n        );\\n        require(\\n            msg.sender == takerBid.taker,\\n            \\\"Order: Taker must be the sender\\\"\\n        );\\n\\n        // Check the maker ask order\\n        bytes32 askHash = makerAsk.hash();\\n        _validateOrder(makerAsk, askHash);\\n\\n        (\\n            bool isExecutionValid,\\n            uint256 tokenId,\\n            uint256 amount\\n        ) = IExecutionStrategy(makerAsk.strategy).canExecuteTakerBid(\\n                takerBid,\\n                makerAsk\\n            );\\n\\n        require(isExecutionValid, \\\"Strategy: Execution invalid\\\");\\n\\n        // Update maker ask order status to true (prevents replay)\\n        _isUserOrderNonceExecutedOrCancelled[makerAsk.signer][\\n            makerAsk.nonce\\n        ] = true;\\n\\n        // Execution part 1/2\\n        _transferFeesAndFunds(\\n            makerAsk.collection,\\n            tokenId,\\n            makerAsk.currency,\\n            msg.sender,\\n            makerAsk.signer,\\n            takerBid.price,\\n            makerAsk.minPercentageToAsk\\n        );\\n\\n        // Execution part 2/2\\n        _transferNonFungibleToken(\\n            makerAsk.collection,\\n            makerAsk.signer,\\n            takerBid.taker,\\n            tokenId,\\n            amount\\n        );\\n\\n        emit TakerBid(\\n            askHash,\\n            makerAsk.nonce,\\n            takerBid.taker,\\n            makerAsk.signer,\\n            makerAsk.strategy,\\n            makerAsk.currency,\\n            makerAsk.collection,\\n            tokenId,\\n            amount,\\n            takerBid.price\\n        );\\n    }\\n\\n    /**\\n     * @notice Match a takerAsk with a makerBid\\n     * @param takerAsk taker ask order\\n     * @param makerBid maker bid order\\n     */\\n    function matchBidWithTakerAsk(\\n        OrderTypes.TakerOrder calldata takerAsk,\\n        OrderTypes.MakerOrder calldata makerBid\\n    ) external override nonReentrant {\\n        require(\\n            (!makerBid.isOrderAsk) && (takerAsk.isOrderAsk),\\n            \\\"Order: Wrong sides\\\"\\n        );\\n        require(\\n            msg.sender == takerAsk.taker,\\n            \\\"Order: Taker must be the sender\\\"\\n        );\\n\\n        // Check the maker bid order\\n        bytes32 bidHash = makerBid.hash();\\n        _validateOrder(makerBid, bidHash);\\n\\n        (\\n            bool isExecutionValid,\\n            uint256 tokenId,\\n            uint256 amount\\n        ) = IExecutionStrategy(makerBid.strategy).canExecuteTakerAsk(\\n                takerAsk,\\n                makerBid\\n            );\\n\\n        require(isExecutionValid, \\\"Strategy: Execution invalid\\\");\\n\\n        // Update maker bid order status to true (prevents replay)\\n        _isUserOrderNonceExecutedOrCancelled[makerBid.signer][\\n            makerBid.nonce\\n        ] = true;\\n\\n        // Execution part 1/2\\n        _transferNonFungibleToken(\\n            makerBid.collection,\\n            msg.sender,\\n            makerBid.signer,\\n            tokenId,\\n            amount\\n        );\\n\\n        // Execution part 2/2\\n        _transferFeesAndFunds(\\n            makerBid.collection,\\n            tokenId,\\n            makerBid.currency,\\n            makerBid.signer,\\n            takerAsk.taker,\\n            takerAsk.price,\\n            takerAsk.minPercentageToAsk\\n        );\\n\\n        emit TakerAsk(\\n            bidHash,\\n            makerBid.nonce,\\n            takerAsk.taker,\\n            makerBid.signer,\\n            makerBid.strategy,\\n            makerBid.currency,\\n            makerBid.collection,\\n            tokenId,\\n            amount,\\n            takerAsk.price\\n        );\\n    }\\n\\n    /**\\n     * @notice Update currency manager\\n     * @param _currencyManager new currency manager address\\n     */\\n    function updateCurrencyManager(address _currencyManager)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _currencyManager != address(0),\\n            \\\"Owner: Cannot be null address\\\"\\n        );\\n        currencyManager = ICurrencyManager(_currencyManager);\\n        emit NewCurrencyManager(_currencyManager);\\n    }\\n\\n    /**\\n     * @notice Update execution manager\\n     * @param _executionManager new execution manager address\\n     */\\n    function updateExecutionManager(address _executionManager)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _executionManager != address(0),\\n            \\\"Owner: Cannot be null address\\\"\\n        );\\n        executionManager = IExecutionManager(_executionManager);\\n        emit NewExecutionManager(_executionManager);\\n    }\\n\\n    /**\\n     * @notice Update protocol fee manager\\n     * @param _protocolFeeManager new protocol fee manager address\\n     */\\n    function updateProtocolFeeManager(address _protocolFeeManager)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _protocolFeeManager != address(0),\\n            \\\"Owner: Cannot be null address\\\"\\n        );\\n        protocolFeeManager = IProtocolFeeManager(_protocolFeeManager);\\n        emit NewProtocolFeeManager(_protocolFeeManager);\\n    }\\n\\n    /**\\n     * @notice Update protocol fee recipient\\n     * @param _protocolFeeRecipient new recipient for protocol fees\\n     */\\n    function updateProtocolFeeRecipient(address _protocolFeeRecipient)\\n        external\\n        onlyOwner\\n    {\\n        protocolFeeRecipient = _protocolFeeRecipient;\\n        emit NewProtocolFeeRecipient(_protocolFeeRecipient);\\n    }\\n\\n    /**\\n     * @notice Update royalty fee manager\\n     * @param _royaltyFeeManager new fee manager address\\n     */\\n    function updateRoyaltyFeeManager(address _royaltyFeeManager)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _royaltyFeeManager != address(0),\\n            \\\"Owner: Cannot be null address\\\"\\n        );\\n        royaltyFeeManager = IRoyaltyFeeManager(_royaltyFeeManager);\\n        emit NewRoyaltyFeeManager(_royaltyFeeManager);\\n    }\\n\\n    /**\\n     * @notice Update transfer selector NFT\\n     * @param _transferSelectorNFT new transfer selector address\\n     */\\n    function updateTransferSelectorNFT(address _transferSelectorNFT)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _transferSelectorNFT != address(0),\\n            \\\"Owner: Cannot be null address\\\"\\n        );\\n        transferSelectorNFT = ITransferSelectorNFT(_transferSelectorNFT);\\n\\n        emit NewTransferSelectorNFT(_transferSelectorNFT);\\n    }\\n\\n    /**\\n     * @notice Check whether user order nonce is executed or cancelled\\n     * @param user address of user\\n     * @param orderNonce nonce of the order\\n     */\\n    function isUserOrderNonceExecutedOrCancelled(\\n        address user,\\n        uint256 orderNonce\\n    ) external view returns (bool) {\\n        return _isUserOrderNonceExecutedOrCancelled[user][orderNonce];\\n    }\\n\\n    /**\\n     * @notice Transfer fees and funds to royalty recipient, protocol, and seller\\n     * @param collection non fungible token address for the transfer\\n     * @param tokenId tokenId\\n     * @param currency address of token being used for the purchase (e.g., WAVAX/USDC)\\n     * @param from sender of the funds\\n     * @param to seller's recipient\\n     * @param amount amount being transferred (in currency)\\n     * @param minPercentageToAsk minimum percentage of the gross amount that goes to ask\\n     */\\n    function _transferFeesAndFunds(\\n        address collection,\\n        uint256 tokenId,\\n        address currency,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 minPercentageToAsk\\n    ) internal {\\n        // Initialize the final amount that is transferred to seller\\n        uint256 finalSellerAmount = amount;\\n\\n        // 1. Protocol fee\\n        {\\n            uint256 protocolFeeAmount = _calculateProtocolFee(\\n                collection,\\n                amount\\n            );\\n\\n            // Check if the protocol fee is different than 0 for this strategy\\n            if (\\n                (protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)\\n            ) {\\n                IERC20(currency).safeTransferFrom(\\n                    from,\\n                    protocolFeeRecipient,\\n                    protocolFeeAmount\\n                );\\n                finalSellerAmount -= protocolFeeAmount;\\n            }\\n        }\\n\\n        // 2. Royalty fee\\n        {\\n            (\\n                address royaltyFeeRecipient,\\n                uint256 royaltyFeeAmount\\n            ) = royaltyFeeManager.calculateRoyaltyFeeAndGetRecipient(\\n                    collection,\\n                    tokenId,\\n                    amount\\n                );\\n\\n            // Check if there is a royalty fee and that it is different to 0\\n            if (\\n                (royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)\\n            ) {\\n                IERC20(currency).safeTransferFrom(\\n                    from,\\n                    royaltyFeeRecipient,\\n                    royaltyFeeAmount\\n                );\\n                finalSellerAmount -= royaltyFeeAmount;\\n\\n                emit RoyaltyPayment(\\n                    collection,\\n                    tokenId,\\n                    royaltyFeeRecipient,\\n                    currency,\\n                    royaltyFeeAmount\\n                );\\n            }\\n        }\\n\\n        require(\\n            (finalSellerAmount * PERCENTAGE_PRECISION) >=\\n                (minPercentageToAsk * amount),\\n            \\\"Fees: Higher than expected\\\"\\n        );\\n\\n        // 3. Transfer final amount (post-fees) to seller\\n        {\\n            IERC20(currency).safeTransferFrom(from, to, finalSellerAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer fees and funds to royalty recipient, protocol, and seller\\n     * @param collection non fungible token address for the transfer\\n     * @param tokenId tokenId\\n     * @param to seller's recipient\\n     * @param amount amount being transferred (in currency)\\n     * @param minPercentageToAsk minimum percentage of the gross amount that goes to ask\\n     */\\n    function _transferFeesAndFundsWithWAVAX(\\n        address collection,\\n        uint256 tokenId,\\n        address to,\\n        uint256 amount,\\n        uint256 minPercentageToAsk\\n    ) internal {\\n        // Initialize the final amount that is transferred to seller\\n        uint256 finalSellerAmount = amount;\\n\\n        // 1. Protocol fee\\n        {\\n            uint256 protocolFeeAmount = _calculateProtocolFee(\\n                collection,\\n                amount\\n            );\\n\\n            // Check if the protocol fee is different than 0 for this strategy\\n            if (\\n                (protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)\\n            ) {\\n                IERC20(WAVAX).safeTransfer(\\n                    protocolFeeRecipient,\\n                    protocolFeeAmount\\n                );\\n                finalSellerAmount -= protocolFeeAmount;\\n            }\\n        }\\n\\n        // 2. Royalty fee\\n        {\\n            (\\n                address royaltyFeeRecipient,\\n                uint256 royaltyFeeAmount\\n            ) = royaltyFeeManager.calculateRoyaltyFeeAndGetRecipient(\\n                    collection,\\n                    tokenId,\\n                    amount\\n                );\\n\\n            // Check if there is a royalty fee and that it is different to 0\\n            if (\\n                (royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)\\n            ) {\\n                IERC20(WAVAX).safeTransfer(\\n                    royaltyFeeRecipient,\\n                    royaltyFeeAmount\\n                );\\n                finalSellerAmount -= royaltyFeeAmount;\\n\\n                emit RoyaltyPayment(\\n                    collection,\\n                    tokenId,\\n                    royaltyFeeRecipient,\\n                    address(WAVAX),\\n                    royaltyFeeAmount\\n                );\\n            }\\n        }\\n\\n        require(\\n            (finalSellerAmount * PERCENTAGE_PRECISION) >=\\n                (minPercentageToAsk * amount),\\n            \\\"Fees: Higher than expected\\\"\\n        );\\n\\n        // 3. Transfer final amount (post-fees) to seller\\n        {\\n            IERC20(WAVAX).safeTransfer(to, finalSellerAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer NFT\\n     * @param collection address of the token collection\\n     * @param from address of the sender\\n     * @param to address of the recipient\\n     * @param tokenId tokenId\\n     * @param amount amount of tokens (1 for ERC721, 1+ for ERC1155)\\n     * @dev For ERC721, amount is not used\\n     */\\n    function _transferNonFungibleToken(\\n        address collection,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal {\\n        // Retrieve the transfer manager address\\n        address transferManager = transferSelectorNFT\\n            .checkTransferManagerForToken(collection);\\n\\n        // If no transfer manager found, it returns address(0)\\n        require(\\n            transferManager != address(0),\\n            \\\"Transfer: No NFT transfer manager available\\\"\\n        );\\n\\n        // If one is found, transfer the token\\n        ITransferManagerNFT(transferManager).transferNonFungibleToken(\\n            collection,\\n            from,\\n            to,\\n            tokenId,\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate protocol fee for a given collection\\n     * @param _collection address of collection\\n     * @param _amount amount to transfer\\n     */\\n    function _calculateProtocolFee(address _collection, uint256 _amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 protocolFee = protocolFeeManager.protocolFeeForCollection(\\n            _collection\\n        );\\n        return (protocolFee * _amount) / PERCENTAGE_PRECISION;\\n    }\\n\\n    /**\\n     * @notice Verify the validity of the maker order\\n     * @param makerOrder maker order\\n     * @param orderHash computed hash for the order\\n     */\\n    function _validateOrder(\\n        OrderTypes.MakerOrder calldata makerOrder,\\n        bytes32 orderHash\\n    ) internal view {\\n        // Verify whether order nonce has expired\\n        require(\\n            (\\n                !_isUserOrderNonceExecutedOrCancelled[makerOrder.signer][\\n                    makerOrder.nonce\\n                ]\\n            ) && (makerOrder.nonce >= userMinOrderNonce[makerOrder.signer]),\\n            \\\"Order: Matching order expired\\\"\\n        );\\n\\n        // Verify the signer is not address(0)\\n        require(makerOrder.signer != address(0), \\\"Order: Invalid signer\\\");\\n\\n        // Verify the amount is not 0\\n        require(makerOrder.amount > 0, \\\"Order: Amount cannot be 0\\\");\\n\\n        // Verify the validity of the signature\\n        require(\\n            SignatureChecker.verify(\\n                orderHash,\\n                makerOrder.signer,\\n                makerOrder.v,\\n                makerOrder.r,\\n                makerOrder.s,\\n                domainSeparator\\n            ),\\n            \\\"Signature: Invalid\\\"\\n        );\\n\\n        // Verify whether the currency is whitelisted\\n        require(\\n            currencyManager.isCurrencyWhitelisted(makerOrder.currency),\\n            \\\"Currency: Not whitelisted\\\"\\n        );\\n\\n        // Verify whether strategy can be executed\\n        require(\\n            executionManager.isStrategyWhitelisted(makerOrder.strategy),\\n            \\\"Strategy: Not whitelisted\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xb293493dd8ac10179884ad2dbdff1c8244ff488faa5e664b88caca6ab3576a10\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICurrencyManager {\\n    function addCurrency(address currency) external;\\n\\n    function removeCurrency(address currency) external;\\n\\n    function isCurrencyWhitelisted(address currency)\\n        external\\n        view\\n        returns (bool);\\n\\n    function viewWhitelistedCurrencies(uint256 cursor, uint256 size)\\n        external\\n        view\\n        returns (address[] memory, uint256);\\n\\n    function viewCountWhitelistedCurrencies() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x20cec00e38bd01cc6c3db2e3cf623db82912098013591492bae24c6546ba962f\",\"license\":\"MIT\"},\"contracts/interfaces/IExecutionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IExecutionManager {\\n    function addStrategy(address strategy) external;\\n\\n    function removeStrategy(address strategy) external;\\n\\n    function isStrategyWhitelisted(address strategy)\\n        external\\n        view\\n        returns (bool);\\n\\n    function viewWhitelistedStrategies(uint256 cursor, uint256 size)\\n        external\\n        view\\n        returns (address[] memory, uint256);\\n\\n    function viewCountWhitelistedStrategies() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x301a5e9c907d44a9ecc3554c72cce33903ae9ca8e77389e7b6a95982d9b0dcb9\",\"license\":\"MIT\"},\"contracts/interfaces/IExecutionStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {OrderTypes} from \\\"../libraries/OrderTypes.sol\\\";\\n\\ninterface IExecutionStrategy {\\n    function canExecuteTakerAsk(\\n        OrderTypes.TakerOrder calldata takerAsk,\\n        OrderTypes.MakerOrder calldata makerBid\\n    )\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n\\n    function canExecuteTakerBid(\\n        OrderTypes.TakerOrder calldata takerBid,\\n        OrderTypes.MakerOrder calldata makerAsk\\n    )\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0x82ccc1351e6257f2e532503aa5d600ca490a7e97082cb31f4e5537219b1cba7e\",\"license\":\"MIT\"},\"contracts/interfaces/IJoepegExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ICurrencyManager} from \\\"./ICurrencyManager.sol\\\";\\nimport {IExecutionManager} from \\\"./IExecutionManager.sol\\\";\\n\\nimport {OrderTypes} from \\\"../libraries/OrderTypes.sol\\\";\\n\\ninterface IJoepegExchange {\\n    function matchAskWithTakerBidUsingAVAXAndWAVAX(\\n        OrderTypes.TakerOrder calldata takerBid,\\n        OrderTypes.MakerOrder calldata makerAsk\\n    ) external payable;\\n\\n    function matchAskWithTakerBid(\\n        OrderTypes.TakerOrder calldata takerBid,\\n        OrderTypes.MakerOrder calldata makerAsk\\n    ) external;\\n\\n    function matchBidWithTakerAsk(\\n        OrderTypes.TakerOrder calldata takerAsk,\\n        OrderTypes.MakerOrder calldata makerBid\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd2de3ae2daf9a21aad6a11ac3285dfb8be1aeed22fb5f522f566ee4fe65dc36a\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IProtocolFeeManager {\\n    function setDefaultProtocolFee(uint256 _defaultProtocolFee) external;\\n\\n    function setProtocolFeeForCollection(\\n        address _collection,\\n        uint256 _protocolFee\\n    ) external;\\n\\n    function unsetProtocolFeeForCollection(address _collection) external;\\n\\n    function protocolFeeForCollection(address _collection)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function defaultProtocolFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4c23934d4de891c89d2d799459704750c5d02970ab2476878bf7c5f459941f6a\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRoyaltyFeeManager {\\n    function calculateRoyaltyFeeAndGetRecipient(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view returns (address, uint256);\\n}\\n\",\"keccak256\":\"0xe91c4fa5c0ae8f35521d0853efcb9e617299909032bce6e98981d11c06088bc6\",\"license\":\"MIT\"},\"contracts/interfaces/ITransferManagerNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITransferManagerNFT {\\n    function transferNonFungibleToken(\\n        address collection,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x725f4c4a9b85f34b496d26562c0d9c09aeeeb8275e7ceaac5eb411810cc12301\",\"license\":\"MIT\"},\"contracts/interfaces/ITransferSelectorNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITransferSelectorNFT {\\n    function checkTransferManagerForToken(address collection)\\n        external\\n        view\\n        returns (address);\\n}\\n\",\"keccak256\":\"0xcd8aae57d85dccef39ab3e2480993e4ba4f752605bf512ae5855a5978ccbf816\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: GNU\\npragma solidity >=0.5.0;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9c9ad99546d3d740022129afd27de11e95216edf9cbf2197e11f50cea6814d21\",\"license\":\"GNU\"},\"contracts/libraries/OrderTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OrderTypes\\n * @notice This library contains order types for the Joepeg exchange.\\n */\\nlibrary OrderTypes {\\n    // keccak256(\\\"MakerOrder(bool isOrderAsk,address signer,address collection,uint256 price,uint256 tokenId,uint256 amount,address strategy,address currency,uint256 nonce,uint256 startTime,uint256 endTime,uint256 minPercentageToAsk,bytes params)\\\")\\n    bytes32 internal constant MAKER_ORDER_HASH =\\n        0x40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a85028;\\n\\n    struct MakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address signer; // signer of the maker order\\n        address collection; // collection address\\n        uint256 price; // price (used as )\\n        uint256 tokenId; // id of the token\\n        uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\\n        address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\\n        address currency; // currency (e.g., WAVAX)\\n        uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\\n        uint256 startTime; // startTime in timestamp\\n        uint256 endTime; // endTime in timestamp\\n        uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // additional parameters\\n        uint8 v; // v: parameter (27 or 28)\\n        bytes32 r; // r: parameter\\n        bytes32 s; // s: parameter\\n    }\\n\\n    struct TakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address taker; // msg.sender\\n        uint256 price; // final price for the purchase\\n        uint256 tokenId;\\n        uint256 minPercentageToAsk; // // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // other params (e.g., tokenId)\\n    }\\n\\n    function hash(MakerOrder memory makerOrder)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    MAKER_ORDER_HASH,\\n                    makerOrder.isOrderAsk,\\n                    makerOrder.signer,\\n                    makerOrder.collection,\\n                    makerOrder.price,\\n                    makerOrder.tokenId,\\n                    makerOrder.amount,\\n                    makerOrder.strategy,\\n                    makerOrder.currency,\\n                    makerOrder.nonce,\\n                    makerOrder.startTime,\\n                    makerOrder.endTime,\\n                    makerOrder.minPercentageToAsk,\\n                    keccak256(makerOrder.params)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xf4455a33b288aced9cf2065be5051a7e370ef8b2a55e816e28f5e7f0d3a664c5\",\"license\":\"MIT\"},\"contracts/libraries/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC1271} from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @title SignatureChecker\\n * @notice This library allows verification of signatures for both EOAs and contracts.\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @notice Recovers the signer of a signature (for EOA)\\n     * @param hash the hash containing the signed mesage\\n     * @param v parameter (27 or 28). This prevents maleability since the public key recovery equation has two possible solutions.\\n     * @param r parameter\\n     * @param s parameter\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // https://ethereum.stackexchange.com/questions/83174/is-it-best-practice-to-check-signature-malleability-in-ecrecover\\n        // https://crypto.iacr.org/2019/affevents/wac/medias/Heninger-BiasedNonceSense.pdf\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"Signature: Invalid s parameter\\\"\\n        );\\n\\n        require(v == 27 || v == 28, \\\"Signature: Invalid v parameter\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"Signature: Invalid signer\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @notice Returns whether the signer matches the signed message\\n     * @param hash the hash containing the signed mesage\\n     * @param signer the signer address to confirm message validity\\n     * @param v parameter (27 or 28)\\n     * @param r parameter\\n     * @param s parameter\\n     * @param domainSeparator paramer to prevent signature being executed in other chains and environments\\n     * @return true --> if valid // false --> if invalid\\n     */\\n    function verify(\\n        bytes32 hash,\\n        address signer,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bytes32 domainSeparator\\n    ) internal view returns (bool) {\\n        // \\\\x19\\\\x01 is the standardized encoding prefix\\n        // https://eips.ethereum.org/EIPS/eip-712#specification\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, hash)\\n        );\\n        if (Address.isContract(signer)) {\\n            // 0x1626ba7e is the interfaceId for signature contracts (see IERC1271)\\n            return\\n                IERC1271(signer).isValidSignature(\\n                    digest,\\n                    abi.encodePacked(r, s, v)\\n                ) == 0x1626ba7e;\\n        } else {\\n            return recover(digest, v, r, s) == signer;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8c3ae38f6324ce609377903fe2a14648e5719398e3439de7f1a8d6e48859252b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101815760003560e01c806387e4401f116100d1578063cbd2ec651161008a578063e256888f11610064578063e256888f1461049c578063f2fde38b146104d0578063f698da25146104f0578063f75ff53f1461050657600080fd5b8063cbd2ec651461043c578063cc2a9a5b1461045c578063d4ff41dc1461047c57600080fd5b806387e4401f1461038b5780638da5cb5b146103ab57806397800e4d146103c95780639e53a69a146103dc578063a70dbaeb146103fc578063c54987691461041c57600080fd5b80634266581e1161013e5780635e14f68e116101185780635e14f68e1461031657806364df049e14610336578063715018a61461035657806373b295c21461036b57600080fd5b80634266581e1461029b578063483abb9f146102d65780635ce052d7146102f657600080fd5b80630f747d7414610186578063127d71f7146101c35780631df47f80146101e557806331e27e271461020557806338e292091461025b5780633b6d032e1461027b575b600080fd5b34801561019257600080fd5b50609a546101a6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101cf57600080fd5b506101e36101de36600461284a565b610526565b005b3480156101f157600080fd5b506101e361020036600461284a565b6105c9565b34801561021157600080fd5b5061024b610220366004612867565b6001600160a01b0391909116600090815260a060209081526040808320938352929052205460ff1690565b60405190151581526020016101ba565b34801561026757600080fd5b506101e3610276366004612893565b61063d565b34801561028757600080fd5b506101e3610296366004612893565b61095f565b3480156102a757600080fd5b506102c86102b636600461284a565b609f6020526000908152604090205481565b6040519081526020016101ba565b3480156102e257600080fd5b50609b546101a6906001600160a01b031681565b34801561030257600080fd5b506101e361031136600461284a565b610c12565b34801561032257600080fd5b50609e546101a6906001600160a01b031681565b34801561034257600080fd5b506099546101a6906001600160a01b031681565b34801561036257600080fd5b506101e3610cac565b34801561037757600080fd5b506097546101a6906001600160a01b031681565b34801561039757600080fd5b50609d546101a6906001600160a01b031681565b3480156103b757600080fd5b506065546001600160a01b03166101a6565b6101e36103d7366004612893565b610ce2565b3480156103e857600080fd5b506101e36103f7366004612907565b61103b565b34801561040857600080fd5b50609c546101a6906001600160a01b031681565b34801561042857600080fd5b506101e361043736600461284a565b611185565b34801561044857600080fd5b506101e361045736600461297c565b61121f565b34801561046857600080fd5b506101e3610477366004612995565b611311565b34801561048857600080fd5b506101e361049736600461284a565b6114e4565b3480156104a857600080fd5b506102c87f000000000000000000000000000000000000000000000000000000000000000081565b3480156104dc57600080fd5b506101e36104eb36600461284a565b61157e565b3480156104fc57600080fd5b506102c860985481565b34801561051257600080fd5b506101e361052136600461284a565b611619565b6065546001600160a01b031633146105595760405162461bcd60e51b815260040161055090612a17565b60405180910390fd5b6001600160a01b03811661057f5760405162461bcd60e51b815260040161055090612a4c565b609c80546001600160a01b0319166001600160a01b0383169081179091556040517f3f02d3784d3c8c06d26bb0ac131b3c2a0b8970b1b9707b9be5526193cf0b89f390600090a250565b6065546001600160a01b031633146105f35760405162461bcd60e51b815260040161055090612a17565b609980546001600160a01b0319166001600160a01b0383169081179091556040517f8cffb07faa2874440346743bdc0a86b06c3335cc47dc49b327d10e77b73ceb1090600090a250565b600260015414156106605760405162461bcd60e51b815260040161055090612a83565b60026001556106726020820182612ad3565b801561068857506106866020830183612ad3565b155b6106a45760405162461bcd60e51b815260040161055090612af0565b6106b4604083016020840161284a565b6001600160a01b0316336001600160a01b0316146106e45760405162461bcd60e51b815260040161055090612b1c565b60006106f76106f283612c31565b6116b3565b9050610703828261175a565b6000808061071760e0860160c0870161284a565b6001600160a01b031663865781ca87876040518363ffffffff1660e01b8152600401610744929190612db8565b606060405180830381865afa158015610761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107859190612f60565b925092509250826107a85760405162461bcd60e51b815260040161055090612f97565b600160a060006107be6040890160208a0161284a565b6001600160a01b03168152602080820192909252604090810160009081206101008a0135825290925290819020805460ff1916921515929092179091556108429061080f906060880190880161284a565b83610821610100890160e08a0161284a565b3361083260408b0160208c0161284a565b8b604001358b6101600135611b0e565b61087c610855606087016040880161284a565b610865604088016020890161284a565b61087560408a0160208b0161284a565b8585611d2e565b61088c60e0860160c0870161284a565b6001600160a01b03166108a5604087016020880161284a565b6001600160a01b03166108be6040890160208a0161284a565b6001600160a01b03167f95fb6205e23ff6bda16a2d1dba56b9ad7c783f67c96fa149785052f47696f2be876101008a018035906108fe9060e08d0161284a565b61090e60608d0160408e0161284a565b6040805194855260208501939093526001600160a01b03918216848401521660608301526080820188905260a082018790528b013560c082015260e00160405180910390a450506001805550505050565b600260015414156109825760405162461bcd60e51b815260040161055090612a83565b60026001556109946020820182612ad3565b1580156109a957506109a96020830183612ad3565b6109c55760405162461bcd60e51b815260040161055090612af0565b6109d5604083016020840161284a565b6001600160a01b0316336001600160a01b031614610a055760405162461bcd60e51b815260040161055090612b1c565b6000610a136106f283612c31565b9050610a1f828261175a565b60008080610a3360e0860160c0870161284a565b6001600160a01b031663ad2390ac87876040518363ffffffff1660e01b8152600401610a60929190612db8565b606060405180830381865afa158015610a7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa19190612f60565b92509250925082610ac45760405162461bcd60e51b815260040161055090612f97565b600160a06000610ada6040890160208a0161284a565b6001600160a01b03168152602080820192909252604090810160009081206101008a0135825290925290819020805460ff191692151592909217909155610b3c90610b2b906060880190880161284a565b336108756040890160208a0161284a565b610b90610b4f606087016040880161284a565b83610b61610100890160e08a0161284a565b610b7160408a0160208b0161284a565b610b8160408c0160208d0161284a565b8b604001358c60800135611b0e565b610ba060e0860160c0870161284a565b6001600160a01b0316610bb9604087016020880161284a565b6001600160a01b0316610bd26040890160208a0161284a565b6001600160a01b03167f68cd251d4d267c6e2034ff0088b990352b97b2002c0476587d0c4da889c11330876101008a018035906108fe9060e08d0161284a565b6065546001600160a01b03163314610c3c5760405162461bcd60e51b815260040161055090612a17565b6001600160a01b038116610c625760405162461bcd60e51b815260040161055090612a4c565b609a80546001600160a01b0319166001600160a01b0383169081179091556040517fb4f5db40df3aced29e88a4babbc3b46e305e07d34098525d18b1497056e6383890600090a250565b6065546001600160a01b03163314610cd65760405162461bcd60e51b815260040161055090612a17565b610ce06000611e8a565b565b60026001541415610d055760405162461bcd60e51b815260040161055090612a83565b6002600155610d176020820182612ad3565b8015610d2d5750610d2b6020830183612ad3565b155b610d495760405162461bcd60e51b815260040161055090612af0565b6097546001600160a01b0316610d66610100830160e0840161284a565b6001600160a01b031614610dbc5760405162461bcd60e51b815260206004820152601d60248201527f4f726465723a2043757272656e6379206d7573742062652057415641580000006044820152606401610550565b610dcc604083016020840161284a565b6001600160a01b0316336001600160a01b031614610dfc5760405162461bcd60e51b815260040161055090612b1c565b6000610e0a6106f283612c31565b9050610e16828261175a565b3483604001351115610e4e57610e493330610e35346040880135612fe4565b6097546001600160a01b0316929190611edc565b610ea1565b34836040013514610ea15760405162461bcd60e51b815260206004820152601960248201527f4f726465723a204d73672e76616c756520746f6f2068696768000000000000006044820152606401610550565b609760009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610ef157600080fd5b505af1158015610f05573d6000803e3d6000fd5b505050505060008060008460c0016020810190610f22919061284a565b6001600160a01b031663865781ca87876040518363ffffffff1660e01b8152600401610f4f929190612db8565b606060405180830381865afa158015610f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f909190612f60565b92509250925082610fb35760405162461bcd60e51b815260040161055090612f97565b600160a06000610fc96040890160208a0161284a565b6001600160a01b03168152602080820192909252604090810160009081206101008a0135825290925290819020805460ff1916921515929092179091556108429061101a906060880190880161284a565b8361102b6040890160208a0161284a565b8960400135896101600135611f4d565b806110885760405162461bcd60e51b815260206004820152601760248201527f43616e63656c3a2043616e6e6f7420626520656d7074790000000000000000006044820152606401610550565b60005b8181101561113d57336000908152609f60205260409020548383838181106110b5576110b5612ffb565b9050602002013510156110da5760405162461bcd60e51b815260040161055090613011565b33600090815260a0602052604081206001918585858181106110fe576110fe612ffb565b90506020020135815260200190815260200160002060006101000a81548160ff021916908315150217905550808061113590613057565b91505061108b565b50336001600160a01b03167ffa0ae5d80fe3763c880a3839fab0294171a6f730d1f82c4cd5392c6f67b417328383604051611179929190613072565b60405180910390a25050565b6065546001600160a01b031633146111af5760405162461bcd60e51b815260040161055090612a17565b6001600160a01b0381166111d55760405162461bcd60e51b815260040161055090612a4c565b609d80546001600160a01b0319166001600160a01b0383169081179091556040517f80e3874461ebbd918ac3e81da0a92e5e51387d70f337237c9123e48d20e5a50890600090a250565b336000908152609f6020526040902054811161124d5760405162461bcd60e51b815260040161055090613011565b336000908152609f602052604090205461126a906207a1206130ae565b81106112c25760405162461bcd60e51b815260206004820152602160248201527f43616e63656c3a2043616e6e6f742063616e63656c206d6f7265206f726465726044820152607360f81b6064820152608401610550565b336000818152609f602052604090819020839055517f1e7178d84f0b0825c65795cd62e7972809ad3aac6917843aaec596161b2c0a97906113069084815260200190565b60405180910390a250565b600054610100900460ff1661132c5760005460ff1615611330565b303b155b6113935760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610550565b600054610100900460ff161580156113b5576000805461ffff19166101011790555b6113bd61215e565b6113c561218d565b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f09c73de1316dde4c80e91bee77727ccdf2cbf7435c9e4c7db6c37af85fa4afcb918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051808303601f190181529190528051602090910120609855609a80546001600160a01b03199081166001600160a01b038a811691909117909255609b80548216898416179055609c80548216888416179055609d805482168784161790556097805482168684161790556099805490911691841691909117905580156114db576000805461ff00191690555b50505050505050565b6065546001600160a01b0316331461150e5760405162461bcd60e51b815260040161055090612a17565b6001600160a01b0381166115345760405162461bcd60e51b815260040161055090612a4c565b609b80546001600160a01b0319166001600160a01b0383169081179091556040517f36e2a376eabc3bc60cb88f29c288f53e36874a95a7f407330ab4f166b090569890600090a250565b6065546001600160a01b031633146115a85760405162461bcd60e51b815260040161055090612a17565b6001600160a01b03811661160d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610550565b61161681611e8a565b50565b6065546001600160a01b031633146116435760405162461bcd60e51b815260040161055090612a17565b6001600160a01b0381166116695760405162461bcd60e51b815260040161055090612a4c565b609e80546001600160a01b0319166001600160a01b0383169081179091556040517f205d78ab41afe80bd6b6aaa5d7599d5300ff8690da3ab1302c1b552f7baf7d8c90600090a250565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01516101208c01516101408d01516101608e01516101808f01518051908e01209a5160009e61173d9e7f40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a850289e919d919c9b9a9998979695949392016130c6565b604051602081830303815290604052805190602001209050919050565b60a0600061176e604085016020860161284a565b6001600160a01b0316815260208082019290925260409081016000908120610100860135825290925290205460ff161580156117e35750609f60006117b9604085016020860161284a565b6001600160a01b03166001600160a01b031681526020019081526020016000205482610100013510155b61182f5760405162461bcd60e51b815260206004820152601d60248201527f4f726465723a204d61746368696e67206f7264657220657870697265640000006044820152606401610550565b6000611841604084016020850161284a565b6001600160a01b031614156118905760405162461bcd60e51b815260206004820152601560248201527427b93232b91d1024b73b30b634b21039b4b3b732b960591b6044820152606401610550565b60008260a00135116118e45760405162461bcd60e51b815260206004820152601960248201527f4f726465723a20416d6f756e742063616e6e6f742062652030000000000000006044820152606401610550565b61191e816118f8604085016020860161284a565b61190a6101c086016101a08701613159565b856101c00135866101e001356098546121bc565b61195f5760405162461bcd60e51b815260206004820152601260248201527114da59db985d1d5c994e88125b9d985b1a5960721b6044820152606401610550565b609a546001600160a01b03166343b938c5611981610100850160e0860161284a565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156119c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e99190613174565b611a355760405162461bcd60e51b815260206004820152601960248201527f43757272656e63793a204e6f742077686974656c6973746564000000000000006044820152606401610550565b609b546001600160a01b031663999ba27c611a5660e0850160c0860161284a565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611a9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abe9190613174565b611b0a5760405162461bcd60e51b815260206004820152601960248201527f53747261746567793a204e6f742077686974656c6973746564000000000000006044820152606401610550565b5050565b816000611b1b89836122fb565b6099549091506001600160a01b031615801590611b3757508015155b15611b6557609954611b58906001600160a01b038981169189911684611edc565b611b628183612fe4565b91505b50609d54604051637a7b1afd60e11b81526001600160a01b038a81166004830152602482018a905260448201869052600092839291169063f4f635fa906064016040805180830381865afa158015611bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be59190613191565b90925090506001600160a01b03821615801590611c0157508015155b15611c8a57611c1b6001600160a01b038916888484611edc565b611c258184612fe4565b9250816001600160a01b0316898b6001600160a01b03167f27c4f0403323142b599832f26acd21c74a9e5b809f2215726e244a4ac588cd7d8b85604051611c819291906001600160a01b03929092168252602082015260400190565b60405180910390a45b50611c97905083836131bf565b611cc17f0000000000000000000000000000000000000000000000000000000000000000836131bf565b1015611d0f5760405162461bcd60e51b815260206004820152601a60248201527f466565733a20486967686572207468616e2065787065637465640000000000006044820152606401610550565b611d246001600160a01b038716868684611edc565b5050505050505050565b609e5460405163cc15949360e01b81526001600160a01b038781166004830152600092169063cc15949390602401602060405180830381865afa158015611d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9d91906131de565b90506001600160a01b038116611e095760405162461bcd60e51b815260206004820152602b60248201527f5472616e736665723a204e6f204e4654207472616e73666572206d616e61676560448201526a7220617661696c61626c6560a81b6064820152608401610550565b6040516333f2fa9f60e01b81526001600160a01b0387811660048301528681166024830152858116604483015260648201859052608482018490528216906333f2fa9f9060a401600060405180830381600087803b158015611e6a57600080fd5b505af1158015611e7e573d6000803e3d6000fd5b50505050505050505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052611f479085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526123ab565b50505050565b816000611f5a87836122fb565b6099549091506001600160a01b031615801590611f7657508015155b15611fa557609954609754611f98916001600160a01b03918216911683612482565b611fa28183612fe4565b91505b50609d54604051637a7b1afd60e11b81526001600160a01b0388811660048301526024820188905260448201869052600092839291169063f4f635fa906064016040805180830381865afa158015612001573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120259190613191565b90925090506001600160a01b0382161580159061204157508015155b156120ba5760975461205d906001600160a01b03168383612482565b6120678184612fe4565b609754604080516001600160a01b03928316815260208101859052929550818516928a928c16917f27c4f0403323142b599832f26acd21c74a9e5b809f2215726e244a4ac588cd7d910160405180910390a45b506120c7905083836131bf565b6120f17f0000000000000000000000000000000000000000000000000000000000000000836131bf565b101561213f5760405162461bcd60e51b815260206004820152601a60248201527f466565733a20486967686572207468616e2065787065637465640000000000006044820152606401610550565b609754612156906001600160a01b03168583612482565b505050505050565b600054610100900460ff166121855760405162461bcd60e51b8152600401610550906131fb565b610ce06124b2565b600054610100900460ff166121b45760405162461bcd60e51b8152600401610550906131fb565b610ce06124df565b60405161190160f01b60208201526022810182905260428101879052600090819060620160405160208183030381529060405280519060200120905061220b876001600160a01b03163b151590565b156122cd57604080516020810187905280820186905260f888901b6001600160f81b0319166060820152815160418183030181526061820192839052630b135d3f60e11b9092526001600160a01b03891691631626ba7e9161227191859160650161329e565b602060405180830381865afa15801561228e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b291906132b7565b6001600160e01b031916631626ba7e60e01b149150506122f1565b866001600160a01b03166122e38288888861250f565b6001600160a01b0316149150505b9695505050505050565b609c546040516238062960e91b81526001600160a01b038481166004830152600092839291169063700c520090602401602060405180830381865afa158015612348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236c91906132e1565b90507f000000000000000000000000000000000000000000000000000000000000000061239984836131bf565b6123a391906132fa565b949350505050565b6000612400826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126a29092919063ffffffff16565b80519091501561247d578080602001905181019061241e9190613174565b61247d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610550565b505050565b6040516001600160a01b03831660248201526044810182905261247d90849063a9059cbb60e01b90606401611f10565b600054610100900460ff166124d95760405162461bcd60e51b8152600401610550906131fb565b60018055565b600054610100900460ff166125065760405162461bcd60e51b8152600401610550906131fb565b610ce033611e8a565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156125815760405162461bcd60e51b815260206004820152601e60248201527f5369676e61747572653a20496e76616c6964207320706172616d6574657200006044820152606401610550565b8360ff16601b148061259657508360ff16601c145b6125e25760405162461bcd60e51b815260206004820152601e60248201527f5369676e61747572653a20496e76616c6964207620706172616d6574657200006044820152606401610550565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015612636573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166126995760405162461bcd60e51b815260206004820152601960248201527f5369676e61747572653a20496e76616c6964207369676e6572000000000000006044820152606401610550565b95945050505050565b60606126b184846000856126bb565b90505b9392505050565b60608247101561271c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610550565b6001600160a01b0385163b6127735760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610550565b600080866001600160a01b0316858760405161278f919061331c565b60006040518083038185875af1925050503d80600081146127cc576040519150601f19603f3d011682016040523d82523d6000602084013e6127d1565b606091505b50915091506127e18282866127ec565b979650505050505050565b606083156127fb5750816126b4565b82511561280b5782518084602001fd5b8160405162461bcd60e51b81526004016105509190613338565b6001600160a01b038116811461161657600080fd5b803561284581612825565b919050565b60006020828403121561285c57600080fd5b81356126b481612825565b6000806040838503121561287a57600080fd5b823561288581612825565b946020939093013593505050565b600080604083850312156128a657600080fd5b823567ffffffffffffffff808211156128be57600080fd5b9084019060c082870312156128d257600080fd5b909250602084013590808211156128e857600080fd5b50830161020081860312156128fc57600080fd5b809150509250929050565b6000806020838503121561291a57600080fd5b823567ffffffffffffffff8082111561293257600080fd5b818501915085601f83011261294657600080fd5b81358181111561295557600080fd5b8660208260051b850101111561296a57600080fd5b60209290920196919550909350505050565b60006020828403121561298e57600080fd5b5035919050565b60008060008060008060c087890312156129ae57600080fd5b86356129b981612825565b955060208701356129c981612825565b945060408701356129d981612825565b935060608701356129e981612825565b925060808701356129f981612825565b915060a0870135612a0981612825565b809150509295509295509295565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f4f776e65723a2043616e6e6f74206265206e756c6c2061646472657373000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b801515811461161657600080fd5b803561284581612aba565b600060208284031215612ae557600080fd5b81356126b481612aba565b6020808252601290820152714f726465723a2057726f6e6720736964657360701b604082015260600190565b6020808252601f908201527f4f726465723a2054616b6572206d757374206265207468652073656e64657200604082015260600190565b634e487b7160e01b600052604160045260246000fd5b604051610200810167ffffffffffffffff81118282101715612b8d57612b8d612b53565b60405290565b600082601f830112612ba457600080fd5b813567ffffffffffffffff80821115612bbf57612bbf612b53565b604051601f8301601f19908116603f01168101908282118183101715612be757612be7612b53565b81604052838152866020858801011115612c0057600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff8116811461284557600080fd5b60006102008236031215612c4457600080fd5b612c4c612b69565b612c5583612ac8565b8152612c636020840161283a565b6020820152612c746040840161283a565b6040820152606083013560608201526080830135608082015260a083013560a0820152612ca360c0840161283a565b60c0820152612cb460e0840161283a565b60e082015261010083810135908201526101208084013590820152610140808401359082015261016080840135908201526101808084013567ffffffffffffffff811115612d0157600080fd5b612d0d36828701612b93565b8284015250506101a0612d21818501612c20565b908201526101c083810135908201526101e092830135928101929092525090565b6000808335601e19843603018112612d5957600080fd5b830160208101925035905067ffffffffffffffff811115612d7957600080fd5b803603831315612d8857600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6040815260006101008435612dcc81612aba565b151560408401526020850135612de181612825565b60018060a01b03811660608501525060408501356080840152606085013560a0840152608085013560c0840152612e1b60a0860186612d42565b60c060e0860152612e2f8386018284612d8f565b9150508381036020850152610200612e5082612e4a88612ac8565b15159052565b612e5c6020870161283a565b6001600160a01b03166020830152612e766040870161283a565b6001600160a01b038116604084015250606086013560608301526080860135608083015260a086013560a0830152612eb060c0870161283a565b6001600160a01b031660c0830152612eca60e0870161283a565b6001600160a01b031660e0830152828601359282019290925261012080860135908201526101408086013590820152610160808601359082015261018091612f1483870187612d42565b8285850152612f268385018284612d8f565b94505050506101a0612f39818701612c20565b60ff16908201526101c085810135908201526101e094850135940193909352509092915050565b600080600060608486031215612f7557600080fd5b8351612f8081612aba565b602085015160409095015190969495509392505050565b6020808252601b908201527f53747261746567793a20457865637574696f6e20696e76616c69640000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015612ff657612ff6612fce565b500390565b634e487b7160e01b600052603260045260246000fd5b60208082526026908201527f43616e63656c3a204f72646572206e6f6e6365206c6f776572207468616e20636040820152651d5c9c995b9d60d21b606082015260800190565b600060001982141561306b5761306b612fce565b5060010190565b6020808252810182905260006001600160fb1b0383111561309257600080fd5b8260051b80856040850137600092016040019182525092915050565b600082198211156130c1576130c1612fce565b500190565b8e81528d151560208201526001600160a01b038d811660408301528c1660608201526101c081018b60808301528a60a08301528960c083015261311460e083018a6001600160a01b03169052565b6001600160a01b0388166101008301526101208201969096526101408101949094526101608401929092526101808301526101a0909101529998505050505050505050565b60006020828403121561316b57600080fd5b6126b482612c20565b60006020828403121561318657600080fd5b81516126b481612aba565b600080604083850312156131a457600080fd5b82516131af81612825565b6020939093015192949293505050565b60008160001904831182151516156131d9576131d9612fce565b500290565b6000602082840312156131f057600080fd5b81516126b481612825565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b83811015613261578181015183820152602001613249565b83811115611f475750506000910152565b6000815180845261328a816020860160208601613246565b601f01601f19169290920160200192915050565b8281526040602082015260006126b16040830184613272565b6000602082840312156132c957600080fd5b81516001600160e01b0319811681146126b457600080fd5b6000602082840312156132f357600080fd5b5051919050565b60008261331757634e487b7160e01b600052601260045260246000fd5b500490565b6000825161332e818460208701613246565b9190910192915050565b6020815260006126b4602083018461327256fea26469706673582212208f0097f7e7db412da9f7033a45ae126167cead5a8a6049a1ec529d6e314e8bce64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cancelAllOrdersForSender(uint256)": {
        "params": {
          "minNonce": "minimum user nonce"
        }
      },
      "cancelMultipleMakerOrders(uint256[])": {
        "params": {
          "orderNonces": "array of order nonces"
        }
      },
      "initialize(address,address,address,address,address,address)": {
        "params": {
          "_WAVAX": "wrapped ether address (for other chains, use wrapped native asset)",
          "_currencyManager": "currency manager address",
          "_executionManager": "execution manager address",
          "_protocolFeeManager": "protocol fee manager address",
          "_protocolFeeRecipient": "protocol fee recipient",
          "_royaltyFeeManager": "royalty fee manager address"
        }
      },
      "isUserOrderNonceExecutedOrCancelled(address,uint256)": {
        "params": {
          "orderNonce": "nonce of the order",
          "user": "address of user"
        }
      },
      "matchAskWithTakerBid((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "params": {
          "makerAsk": "maker ask order",
          "takerBid": "taker bid order"
        }
      },
      "matchAskWithTakerBidUsingAVAXAndWAVAX((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "params": {
          "makerAsk": "maker ask order",
          "takerBid": "taker bid order"
        }
      },
      "matchBidWithTakerAsk((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "params": {
          "makerBid": "maker bid order",
          "takerAsk": "taker ask order"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCurrencyManager(address)": {
        "params": {
          "_currencyManager": "new currency manager address"
        }
      },
      "updateExecutionManager(address)": {
        "params": {
          "_executionManager": "new execution manager address"
        }
      },
      "updateProtocolFeeManager(address)": {
        "params": {
          "_protocolFeeManager": "new protocol fee manager address"
        }
      },
      "updateProtocolFeeRecipient(address)": {
        "params": {
          "_protocolFeeRecipient": "new recipient for protocol fees"
        }
      },
      "updateRoyaltyFeeManager(address)": {
        "params": {
          "_royaltyFeeManager": "new fee manager address"
        }
      },
      "updateTransferSelectorNFT(address)": {
        "params": {
          "_transferSelectorNFT": "new transfer selector address"
        }
      }
    },
    "title": "JoepegExchange",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelAllOrdersForSender(uint256)": {
        "notice": "Cancel all pending orders for a sender"
      },
      "cancelMultipleMakerOrders(uint256[])": {
        "notice": "Cancel maker orders"
      },
      "initialize(address,address,address,address,address,address)": {
        "notice": "Constructor"
      },
      "isUserOrderNonceExecutedOrCancelled(address,uint256)": {
        "notice": "Check whether user order nonce is executed or cancelled"
      },
      "matchAskWithTakerBid((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "notice": "Match a takerBid with a matchAsk"
      },
      "matchAskWithTakerBidUsingAVAXAndWAVAX((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "notice": "Match ask with a taker bid order using AVAX"
      },
      "matchBidWithTakerAsk((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "notice": "Match a takerAsk with a makerBid"
      },
      "updateCurrencyManager(address)": {
        "notice": "Update currency manager"
      },
      "updateExecutionManager(address)": {
        "notice": "Update execution manager"
      },
      "updateProtocolFeeManager(address)": {
        "notice": "Update protocol fee manager"
      },
      "updateProtocolFeeRecipient(address)": {
        "notice": "Update protocol fee recipient"
      },
      "updateRoyaltyFeeManager(address)": {
        "notice": "Update royalty fee manager"
      },
      "updateTransferSelectorNFT(address)": {
        "notice": "Update transfer selector NFT"
      }
    },
    "notice": "Fork of the LooksRareExchange contract with some minor additions.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/JoepegExchange.sol:JoepegExchange",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/JoepegExchange.sol:JoepegExchange",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 211,
        "contract": "contracts/JoepegExchange.sol:JoepegExchange",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 255,
        "contract": "contracts/JoepegExchange.sol:JoepegExchange",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 540,
        "contract": "contracts/JoepegExchange.sol:JoepegExchange",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/JoepegExchange.sol:JoepegExchange",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/JoepegExchange.sol:JoepegExchange",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3829,
        "contract": "contracts/JoepegExchange.sol:JoepegExchange",
        "label": "WAVAX",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 3831,
        "contract": "contracts/JoepegExchange.sol:JoepegExchange",
        "label": "domainSeparator",
        "offset": 0,
        "slot": "152",
        "type": "t_bytes32"
      },
      {
        "astId": 3833,
        "contract": "contracts/JoepegExchange.sol:JoepegExchange",
        "label": "protocolFeeRecipient",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 3836,
        "contract": "contracts/JoepegExchange.sol:JoepegExchange",
        "label": "currencyManager",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(ICurrencyManager)6724"
      },
      {
        "astId": 3839,
        "contract": "contracts/JoepegExchange.sol:JoepegExchange",
        "label": "executionManager",
        "offset": 0,
        "slot": "155",
        "type": "t_contract(IExecutionManager)6761"
      },
      {
        "astId": 3842,
        "contract": "contracts/JoepegExchange.sol:JoepegExchange",
        "label": "protocolFeeManager",
        "offset": 0,
        "slot": "156",
        "type": "t_contract(IProtocolFeeManager)6882"
      },
      {
        "astId": 3845,
        "contract": "contracts/JoepegExchange.sol:JoepegExchange",
        "label": "royaltyFeeManager",
        "offset": 0,
        "slot": "157",
        "type": "t_contract(IRoyaltyFeeManager)6898"
      },
      {
        "astId": 3848,
        "contract": "contracts/JoepegExchange.sol:JoepegExchange",
        "label": "transferSelectorNFT",
        "offset": 0,
        "slot": "158",
        "type": "t_contract(ITransferSelectorNFT)6965"
      },
      {
        "astId": 3852,
        "contract": "contracts/JoepegExchange.sol:JoepegExchange",
        "label": "userMinOrderNonce",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3858,
        "contract": "contracts/JoepegExchange.sol:JoepegExchange",
        "label": "_isUserOrderNonceExecutedOrCancelled",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICurrencyManager)6724": {
        "encoding": "inplace",
        "label": "contract ICurrencyManager",
        "numberOfBytes": "20"
      },
      "t_contract(IExecutionManager)6761": {
        "encoding": "inplace",
        "label": "contract IExecutionManager",
        "numberOfBytes": "20"
      },
      "t_contract(IProtocolFeeManager)6882": {
        "encoding": "inplace",
        "label": "contract IProtocolFeeManager",
        "numberOfBytes": "20"
      },
      "t_contract(IRoyaltyFeeManager)6898": {
        "encoding": "inplace",
        "label": "contract IRoyaltyFeeManager",
        "numberOfBytes": "20"
      },
      "t_contract(ITransferSelectorNFT)6965": {
        "encoding": "inplace",
        "label": "contract ITransferSelectorNFT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}